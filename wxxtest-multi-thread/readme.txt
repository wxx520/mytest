多线程模块练习：
1、分工，有几类角色，分别负责什么
2、调度，何时的时机对应的工作就开始进行
   比如生产队列满了，生产者就暂停生产，直到有消费者消费才唤醒生产者继续生产；
   生产队列为空时，消费者暂停消费，直到有生产者生产新的物料出来，唤醒消费者开始消费
3、对于多个线程需要修改/查询的共享数据，需要共享保护/加锁


java内存模型，其实就是解决从内存中读到什么的问题？
因为缓存和reorder的优化，单线程下程序的语义能够被保证。
多线程下却不能，即当指令a早于指令b执行时，a造成的结果也不一定会对b可见，也就是常说的线程安全问题。
为了保证上述直觉的成立
核心就是happens before规则，内容主要包括三部分
1、单线程内部：按照源码顺序存在happens before关系
2、多个线程之间：
    2.1 hb(thread.start(), 新线程的第一条指令)
    2.2 hb(前一个线程对volatile写，volatile读)
    2.3 hb(Synchronized-exit，Synchronized-enter)
    ....
3、happens before规则具有传递性

原子性问题解决
1、多线程的固有问题，与优化无关，通过锁(synchronized)解决
2、hb(Synchronized-exit，Synchronized-enter)将锁纳入hb体系
